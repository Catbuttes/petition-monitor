{"version":3,"sources":["PetitionSelector.tsx","PetitionViewer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PetitionSelector","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_getErrorMessage","bind","assertThisInitialized","_petitionIdChanged","_submitClicked","state","PetitionID","defaultPetition","ButtonDisabled","react","Stack","className","Item","align","TextField","label","name","autoComplete","onGetErrorMessage","validateOnLoad","onChange","defaultValue","toString","PrimaryButton","text","disabled","onClick","submitPetitionID","e","value","isUndefined","setState","maybeNumber","Number","isNaN","React","PetitionViewer","PetitionTitle","PetitionSignatureCount","GetData","completeUrl","href","_this2","fetch","then","response","json","myJson","sigs","data","attributes","signature_count","toLocaleString","action","catch","error","setTimeout","App","petitionIdSubmitted","DisplayCount","search","window","location","petition","URLSearchParams","react_default","a","createElement","undefined","PetitionSelector_PetitionSelector","PetitionViewer_PetitionViewer","petitionID","Component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","elements","document","getElementsByClassName","i","length","element","attribute","getAttribute","ReactDOM","render","src_App_0","URL","process","origin","addEventListener","concat","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.63040313.chunk.js","sourcesContent":["import * as React from 'react';\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\nimport { PrimaryButton } from 'office-ui-fabric-react/lib/Button';\nimport { Stack } from 'office-ui-fabric-react/lib/Stack';\nimport { isUndefined } from 'util';\n\n\nexport interface IPetitionSelectorProps {\n    submitPetitionID: (petitionID: String) => void;\n    defaultPetition: String;\n}\n\nexport interface IPetitionSelectorState {\n    PetitionID: String;\n    ButtonDisabled: boolean;\n}\n\n\nexport default class PetitionSelector extends React.Component<IPetitionSelectorProps, IPetitionSelectorState> {\n    constructor(props: IPetitionSelectorProps) {\n        super(props);\n        this._getErrorMessage = this._getErrorMessage.bind(this);\n        this._petitionIdChanged = this._petitionIdChanged.bind(this);\n        this._submitClicked = this._submitClicked.bind(this);\n\n        this.state = {\n            PetitionID: this.props.defaultPetition,\n            ButtonDisabled: false\n        }\n    }\n\n    public render(): JSX.Element {\n        return (\n            <Stack className=\"PetitionSelectorInput\" >\n                <Stack.Item align=\"center\">\n                    <TextField\n                        label=\"Enter the petition ID\"\n                        name=\"petitionID\"\n                        autoComplete=\"on\"\n                        onGetErrorMessage={this._getErrorMessage}\n                        validateOnLoad={true}\n                        onChange={this._petitionIdChanged}\n                        defaultValue={this.props.defaultPetition.toString()}\n                    />\n                </Stack.Item>\n                <Stack.Item align=\"center\">\n                    <PrimaryButton\n                        text=\"Get Signature Count\"\n                        disabled={this.state.ButtonDisabled}\n                        onClick={this._submitClicked}\n                    />\n                </Stack.Item>\n            </Stack>\n        );\n    }\n\n    private _submitClicked() :void {\n        this.props.submitPetitionID(this.state.PetitionID);\n    }\n\n    private _petitionIdChanged(e: any, value?: string) :void {\n        if(isUndefined(value)){\n            this.setState({PetitionID: \"\"})\n        }\n        else {\n            this.setState({PetitionID: value.toString()})\n        }\n\n    }\n\n    private _getErrorMessage(value: string): string {\n        if (value === \"\") {\n            this.setState({ButtonDisabled:true})\n            return \"\"\n        };\n\n        var maybeNumber = Number(value);\n        if (!isNaN(maybeNumber)) {\n            this.setState({ButtonDisabled:false})\n            return ''\n        }\n        else {\n            this.setState({ButtonDisabled:true})\n            return \"Petition IDs Should be numeric\";\n        }\n\n    }\n}\n","import * as React from 'react';\n\nexport interface IPetitionViewerProps {\n    PetitionID: String;\n}\n\nexport interface IPetitionViewerState {\n    PetitionTitle: String;\n    PetitionSignatureCount: String;\n}\n\nexport default class PetitionViewer extends React.Component<IPetitionViewerProps, IPetitionViewerState> {\n    constructor(props: IPetitionViewerProps) {\n        super(props);\n\n        this.state = {\n            PetitionTitle: \"\",\n            PetitionSignatureCount: \"\"\n        }\n\n\n    }\n\n    public componentDidMount() {\n        this.GetData(this.props.PetitionID);\n    }\n\n    public render() {\n        var baseUrl = 'https://petition.parliament.uk/petitions/'\n        var completeUrl = baseUrl + this.props.PetitionID\n\n        return (\n            <div>\n                <h2>{this.state.PetitionTitle}</h2>\n                <h3>{this.state.PetitionSignatureCount} signatures</h3>\n                <a href={completeUrl}>Link to petition</a>\n            </div>\n        );\n    }\n\n    private GetData(PetitionID: String): void {\n        var baseUrl = 'https://petition.parliament.uk/petitions/'\n        var completeUrl = baseUrl + PetitionID + '.json'\n        fetch(completeUrl)\n            .then((response) => {\n                return response.json();\n            })\n            .then((myJson) => {\n                var sigs = Number(myJson.data.attributes.signature_count).toLocaleString();\n                this.setState({PetitionTitle: myJson.data.attributes.action, PetitionSignatureCount: sigs})\n            })\n            .catch((error) => {\n                if(this.state.PetitionSignatureCount == \"\") {\n                    this.setState({PetitionTitle: \"Unable to get petition details\", PetitionSignatureCount: \"Unknown\"})\n                }\n            })\n\n        setTimeout(() => this.GetData(PetitionID), 5000);\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport PetitionSelector from './PetitionSelector';\nimport PetitionViewer from './PetitionViewer';\n\nexport interface IAppProps {\n  defaultPetition: String|null;\n}\nexport interface IAppState {\n  PetitionID: String;\n  DisplayCount: boolean;\n}\n\nclass App extends React.Component<IAppProps, IAppState> {\n  constructor(props: IAppProps) {\n    super(props);\n    this.petitionIdSubmitted = this.petitionIdSubmitted.bind(this);\n\n    this.state = {\n        PetitionID: \"\",\n        DisplayCount: false\n    }\n\n}\n  render() {\n    let search = window.location.search;\n    let params = new URLSearchParams(search);\n    let paramPetition = this.props.defaultPetition\n\n    let petition: String = paramPetition || \"241584\"\n\n    return (\n      <div className=\"App\">\n        {(this.state.DisplayCount) ? undefined : <PetitionSelector submitPetitionID={this.petitionIdSubmitted} defaultPetition={petition}/>}\n        {(this.state.DisplayCount) ? <PetitionViewer PetitionID={this.state.PetitionID} /> : undefined }\n      </div>\n    );\n  }\n\n  private petitionIdSubmitted(petitionID:String)\n  {\n      this.setState({PetitionID: petitionID, DisplayCount: true});\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nlet elements = document.getElementsByClassName(\"PetitionMonitorApp\")\n//let elements = document.getElementsByTagName(\"app\")\n\nfor (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n    let attribute = element.getAttribute('defaultPetition')\n    ReactDOM.render(<App defaultPetition={attribute} />, element);\n}\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}